{"version":3,"sources":["mouth2.mp4","baby.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","vidLength","setVidLength","clicked","setClicked","Mouth","Video","setVideo","vidRef","useRef","useEffect","a","navigator","mediaDevices","getUserMedia","audio","stream","context","AudioContext","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","connect","dataArray","Uint8Array","frequencyBinCount","setInterval","getByteFrequencyData","avg","reduce","b","length","newTime","current","currentTime","getMedia","addEventListener","duration","play","pause","className","onClick","ref","src","type","style","position","bottom","left","vid","Baby","load","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,iOC+E5BC,MA1Ef,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,mBAASK,KAHtB,mBAGNC,EAHM,KAGCC,EAHD,KAIPC,EAASC,iBAAO,MAkDtB,OA1CAC,qBAAU,WACHP,GACS,uCAAG,kCAAAQ,EAAA,sEACMC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,IAFM,OACTC,EADS,OAITC,EAAU,IAAIC,cACdC,EAAWF,EAAQG,kBAChBC,sBAAwB,GACjCF,EAASG,QAAU,KAELL,EAAQM,wBAAwBP,GAExCQ,QAAQL,GAERM,EAAY,IAAIC,WAAWP,EAASQ,mBAC1CC,aAAY,WACVT,EAASU,qBAAqBJ,GAC9B,IAAIK,EAAML,EAAUM,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,IAAG,GAAKP,EAAUQ,OAGvDH,EADS,MACGA,EADH,KAETA,EAAM,KAAIA,EAAM,GAEpB,IAAMI,EAAUJ,EAJH,IAIgB7B,EACzBO,EAAO2B,QAAQC,cAAgBF,IACnC1B,EAAO2B,QAAQC,YAAcN,EANhB,IAM6B7B,KAEzC,IA1BY,4CAAH,oDA6BdoC,KACC,CAAClC,EAASF,IAEbS,qBAAU,WACe,OAAnBF,EAAO2B,SACX3B,EAAO2B,QAAQG,iBAAiB,kBAAkB,WAChDpC,EAAaM,EAAO2B,QAAQI,UAC5B/B,EAAO2B,QAAQK,OACfhC,EAAO2B,QAAQM,aAEhB,IAED,yBAAKC,UAAU,QACXvC,GAAW,4BAAQwC,QAAS,kBAAMvC,GAAW,KAAlC,SACZD,GACC,oCACE,2BAAOyC,IAAKpC,GACV,4BAAQqC,IAAKvC,EAAOwC,KAAK,eAE3B,4BACEC,MAAO,CAAEC,SAAU,WAAYC,OAAQ,EAAGC,KAAM,GAChDP,QAAS,kBA1DHQ,EA0DiB7C,IAAU8C,IAAO/C,IAAQ+C,IAzDxD7C,EAAS4C,GACT3C,EAAO2B,QAAQkB,OACf7C,EAAO2B,QAAQK,YACfhC,EAAO2B,QAAQM,QAJD,IAAAU,IAwDR,WCvDUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7a72ce0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mouth2.92e0ca15.mp4\";","module.exports = __webpack_public_path__ + \"static/media/baby.5fbb59e1.mp4\";","import React, { useEffect, useState, useRef } from \"react\"\nimport Mouth from \"./mouth2.mp4\"\nimport Baby from \"./baby.mp4\"\nimport \"./App.css\"\n\nfunction App() {\n  const [vidLength, setVidLength] = useState(1)\n  const [clicked, setClicked] = useState(false)\n  const [Video, setVideo] = useState(Mouth)\n  const vidRef = useRef(null)\n\n  const loadVid = vid => {\n    setVideo(vid)\n    vidRef.current.load()\n    vidRef.current.play()\n    vidRef.current.pause()\n  }\n  useEffect(() => {\n    if (!clicked) return\n    const getMedia = async () => {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      })\n      const context = new AudioContext()\n      const analyser = context.createAnalyser()\n      analyser.smoothingTimeConstant = 0.2\n      analyser.fftSize = 1024\n\n      const input = context.createMediaStreamSource(stream)\n\n      input.connect(analyser)\n\n      const dataArray = new Uint8Array(analyser.frequencyBinCount)\n      setInterval(function step() {\n        analyser.getByteFrequencyData(dataArray)\n        let avg = dataArray.reduce((a, b) => a + b, 0) / dataArray.length\n        //console.log(avg)\n        const test = 120\n        if (avg > test) avg = test\n        if (avg < 10) avg = 0\n\n        const newTime = avg / test / vidLength\n        if (vidRef.current.currentTime === newTime) return\n        vidRef.current.currentTime = avg / test / vidLength\n        //requestAnimationFrame(step)\n      }, 50)\n    }\n\n    getMedia()\n  }, [clicked, vidLength])\n\n  useEffect(() => {\n    if (vidRef.current === null) return\n    vidRef.current.addEventListener(\"loadedmetadata\", () => {\n      setVidLength(vidRef.current.duration)\n      vidRef.current.play()\n      vidRef.current.pause()\n    })\n  }, [])\n  return (\n    <div className=\"App\">\n      {!clicked && <button onClick={() => setClicked(true)}>press</button>}\n      {clicked && (\n        <>\n          <video ref={vidRef}>\n            <source src={Video} type=\"video/mp4\" />\n          </video>\n          <button\n            style={{ position: \"absolute\", bottom: 0, left: 0 }}\n            onClick={() => loadVid(Video === Baby ? Mouth : Baby)}\n          >\n            Swap\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}